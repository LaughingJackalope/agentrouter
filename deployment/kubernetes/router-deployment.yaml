apiVersion: apps/v1
kind: Deployment
metadata:
  name: message-router
  labels:
    app: message-router
    tier: backend
    component: router
spec:
  replicas: 3
  selector:
    matchLabels:
      app: message-router
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: message-router
        tier: backend
        component: router
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: message-router
        image: gcr.io/YOUR_PROJECT_ID/message-router:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 1
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        env:
        - name: FLASK_ENV
          value: "production"
        - name: GCP_PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: gcp.project.id
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url
        - name: LOG_LEVEL
          value: "INFO"
      restartPolicy: Always
      nodeSelector:
        cloud.google.com/gke-nodepool: default-pool
      terminationGracePeriodSeconds: 30
